SudokuHelper:	
	
	public LinkedList<SudokuFieldValues> findSiblingsInRows(int rowBlock, // 0,1,2
								  				Integer number)
	{
		LinkedList<SudokuFieldValues> res = new LinkedList<SudokuFieldValues>();
		for (int i=rowBlock*sm.getBlockSize(); i<(rowBlock+1)*sm.getBlockSize();i++)
		{
			for (int j=0; j<sm.getSize(); j++)
				if (number.equals(sm.getValue(i, j)))
				{
					SudokuFieldValues sfv = new SudokuFieldValues(i, j);
					sfv.addValue(number);
					res.add(sfv);
				}
		}
		if (res.size()<2)
			res.clear();
		return res;
	}
	
	public LinkedList<SudokuFieldValues> findSiblingsInCols(int colBlock, // 0,1,2
				Integer number)
	{
		LinkedList<SudokuFieldValues> res = new LinkedList<SudokuFieldValues>();
		for (int c=colBlock*sm.getBlockSize(); c<(colBlock+1)*sm.getBlockSize();c++)
			{
			for (int r=0; r<sm.getSize(); r++)
				if (number.equals(sm.getValue(r, c)))
				{
				SudokuFieldValues sfv = new SudokuFieldValues(r, c);
				sfv.addValue(number);
				res.add(sfv);
				}
			}
		if (res.size()<2)
		res.clear();
		return res;
	}

	
	SudokuHelperTest:
	
	@Test
	public void testFindSiblingsInRows() {
		LinkedList<SudokuFieldValues> ll = sh.findSiblingsInRows(0, 9);
		Assert.assertEquals(2, ll.size());
		SudokuFieldValues sfv = ll.getFirst();
		Assert.assertEquals(0, sfv.getRow());
		Assert.assertEquals(0, sfv.getCol());
		Assert.assertEquals(9, sfv.getValues().getFirst().intValue());
		sfv = ll.getLast();
		Assert.assertEquals(2, sfv.getRow());
		Assert.assertEquals(8, sfv.getCol());
		Assert.assertEquals(9, sfv.getValues().getFirst().intValue());
		
		ll = sh.findSiblingsInRows(0, 8);
		Assert.assertEquals(0,ll.size());
	}

	@Test
	public void testFindSiblingsInCols() {
		LinkedList<SudokuFieldValues> ll = sh.findSiblingsInCols(2, 1);
		Assert.assertEquals(2, ll.size());
		SudokuFieldValues sfv = ll.getFirst();
		Assert.assertEquals(0, sfv.getRow());
		Assert.assertEquals(7, sfv.getCol());
		Assert.assertEquals(1, sfv.getValues().getFirst().intValue());
		sfv = ll.getLast();
		Assert.assertEquals(8, sfv.getRow());
		Assert.assertEquals(8, sfv.getCol());
		Assert.assertEquals(1, sfv.getValues().getFirst().intValue());
		
		ll = sh.findSiblingsInCols(0, 8);
		Assert.assertEquals(0,ll.size());
	}
	